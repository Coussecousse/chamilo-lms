{% extends "@ChamiloCore/Layout/layout_one_col.html.twig" %}

{% block content %}
    <section id="change-password" class="py-8">
        <div class="mx-auto w-full max-w-xl">
            <a href="{{ path('chamilo_core_account_home') }}" class="inline-block mb-6 text-primary hover:underline">
                ‚Üê {{ "Back to account"|trans }}
            </a>

            <h2 class="text-2xl font-semibold text-center mb-6">{{ "Change Password"|trans }}</h2>

            {{ form_start(form, {'attr': {'class': 'bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4'}}) }}

            {% for message in app.flashes('success') %}
                <div class="alert alert-success">
                    {{ message }}
                </div>
            {% endfor %}

            {% if form.vars.errors|length > 0 %}
                <div class="alert alert-danger text-sm mb-4" id="server-errors">
                    {{ form_errors(form) }}
                </div>
            {% endif %}

            {% for field in ['currentPassword', 'newPassword', 'confirmPassword'] %}
                <div class="mb-4">
                    {{ form_label(attribute(form, field)) }}
                    {% set errorClass = attribute(form, field).vars.errors|length > 0 ? 'border-danger' : 'border-gray-300' %}

                    <div class="relative">
                        {{ form_widget(attribute(form, field), {
                            'attr': {
                                'class': 'shadow appearance-none border ' ~ errorClass ~ ' rounded w-full py-2 px-3 pr-10 text-gray-700 leading-tight focus:outline-none focus:shadow-outline',
                                'id': 'change_password_' ~ field
                            }
                        }) }}

                        <button type="button"
                                class="toggle-password absolute right-3 top-1/2 -translate-y-1/2 cursor-pointer"
                                data-target="#change_password_{{ field }}"
                                aria-label="{{ 'Show/Hide password'|trans }}">
                            <i class="mdi mdi-eye-outline text-gray-700"></i>
                        </button>
                    </div>

                    {% if field == 'newPassword' %}
                        <ul id="password-requirements" class="text-sm text-red-500 mt-2" style="display:none;"></ul>
                        <div id="new-password-errors">
                            {{ form_errors(attribute(form, field)) }}
                        </div>
                    {% else %}
                        <div class="text-danger text-sm mt-1">
                            {{ form_errors(attribute(form, field)) }}
                        </div>
                    {% endif %}
                </div>
            {% endfor %}

            {% if form.enable2FA is defined %}
                <div class="mb-4">
                    {{ form_label(form.enable2FA) }}
                    {{ form_widget(form.enable2FA, {
                        'attr': {
                            'class': 'form-checkbox',
                            'id': 'change_password_enable2FA'
                        }
                    }) }}
                    <div class="text-danger text-sm mt-1">
                        {{ form_errors(form.enable2FA) }}
                    </div>
                </div>
            {% endif %}

            {% set show2FAField = (qrCode is defined and showQRCode)
                or (form.enable2FA is defined and form.enable2FA.vars.data)
                or user.getMfaEnabled() %}

            {% if show2FAField %}
                <div class="mb-4" id="confirm2fa-field" {% if not show2FAField %}style="display:none"{% endif %}>
                    {{ form_label(form.confirm2FACode) }}
                    {% set errorClass = form.confirm2FACode.vars.errors|length > 0 ? 'border-danger' : 'border-gray-300' %}
                    {{ form_widget(form.confirm2FACode, {
                        'attr': {
                            'class': 'shadow appearance-none border ' ~ errorClass ~ ' rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
                        }
                    }) }}
                    <div class="text-danger text-sm mt-1">
                        {{ form_errors(form.confirm2FACode) }}
                    </div>
                </div>
            {% endif %}

            <div class="flex items-center justify-center mt-6">
                <input type="hidden" name="_token" value="{{ csrf_token('change_password') }}">
                <button type="submit" class="btn btn--primary">
                    {% if form.currentPassword.vars.value or form.newPassword.vars.value or form.confirmPassword.vars.value %}
                        {{ "Change Password"|trans }}
                    {% else %}
                        {{ "Update settings"|trans }}
                    {% endif %}
                </button>
            </div>

            {{ form_end(form) }}

            {% if qrCode is defined and (showQRCode or user.getMfaEnabled()) %}
                <div class="mt-6 text-center">
                    <h3 class="text-lg font-medium">{{ 'Scan the QR code to enable 2FA'|trans }}</h3>
                    <img src="data:image/png;base64,{{ qrCode }}" alt="{{ 'QR code for 2FA'|trans }}" class="block m-auto">
                    <p class="text-gray-600 mt-2">{{ 'Then enter the 6-digit code shown in your app at the bottom of the form.'|trans }}</p>
                </div>
            {% endif %}
        </div>
    </section>

    {{ password_checker_js('#change_password_newPassword') }}

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        /* ===== Show/Hide password (eye icon) ===== */
        document.querySelectorAll('.toggle-password').forEach(function (btn) {
          btn.addEventListener('click', function () {
            const input = document.querySelector(this.getAttribute('data-target'));
            if (!input) return;
            const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
            input.setAttribute('type', type);
            const icon = this.querySelector('i');
            if (icon) {
              icon.classList.toggle('mdi-eye-outline');
              icon.classList.toggle('mdi-eye-off-outline');
            }
          });
        });

        /* ===== 2FA field visibility ===== */
        const enable2FAInput = document.querySelector('#change_password_enable2FA');
        const confirm2FAField = document.querySelector('#confirm2fa-field');
        function update2FAVisibility() {
          const alreadyEnabled = {{ user.getMfaEnabled() ? 'true' : 'false' }};
          const shouldShow = enable2FAInput && (enable2FAInput.checked || alreadyEnabled);
          if (confirm2FAField) confirm2FAField.style.display = shouldShow ? 'block' : 'none';
        }
        if (enable2FAInput && confirm2FAField) {
          enable2FAInput.addEventListener('change', update2FAVisibility);
          update2FAVisibility();
        }

        /* ===== Password requirements (only show unmet, and only after typing) ===== */
        const field        = document.querySelector('#change_password_newPassword');
        const list         = document.getElementById('password-requirements');
        const serverErrors = document.getElementById('server-errors');
        const newPassErrs  = document.getElementById('new-password-errors');

        if (!field || !list) return;

        // Requirements injected from backend
        const req = {{ password_requirements|json_encode|raw }};

        function counts(v) {
          return {
            length:    v.length,
            numeric:   (v.match(/\d/g) || []).length,
            specials:  (v.match(/[^A-Za-z0-9]/g) || []).length,
            lowercase: (v.match(/[a-z]/g) || []).length,
            uppercase: (v.match(/[A-Z]/g) || []).length,
          };
        }

        function unmetMessages(v) {
          const c = counts(v);
          const msgs = [];
          if (req.length    > 0 && c.length    < req.length)    msgs.push(`Minimum ${req.length} character(s)`);
          if (req.numeric   > 0 && c.numeric   < req.numeric)   msgs.push(`Minimum ${req.numeric} numeric character(s)`);
          if (req.specials  > 0 && c.specials  < req.specials)  msgs.push(`Minimum ${req.specials} special character(s)`);
          if (req.lowercase > 0 && c.lowercase < req.lowercase) msgs.push(`Minimum ${req.lowercase} lowercase character(s)`);
          if (req.uppercase > 0 && c.uppercase < req.uppercase) msgs.push(`Minimum ${req.uppercase} uppercase character(s)`);
          return msgs;
        }

        function renderList(v) {
          const msgs = v ? unmetMessages(v) : [];
          if (msgs.length === 0) {
            list.style.display = 'none';
            list.innerHTML = '';
            return;
          }
          list.innerHTML = '';
          msgs.forEach(function (text) {
            const li = document.createElement('li');
            li.className = 'text-sm text-red-500 mt-1';
            li.textContent = text;
            list.appendChild(li);
          });
          list.style.display = 'block';
        }

        function onUserInput() {
          if (serverErrors) serverErrors.style.display = 'none';
          if (newPassErrs)  newPassErrs.style.display  = 'none';
          renderList(field.value);
        }

        field.addEventListener('input', onUserInput, { passive: true });
        field.addEventListener('blur', function () {
          if (!field.value) {
            list.style.display = 'none';
            list.innerHTML = '';
          }
        });

        // Initial state: hidden
        list.style.display = 'none';
        list.innerHTML = '';
      });
    </script>
{% endblock %}
